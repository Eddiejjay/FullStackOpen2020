{"ast":null,"code":"import { gql } from '@apollo/client';\nexport const BOOK_DETAILS = gql`\n  fragment BookDetails on Book {\n    title\n    published\n    author {\n      name\n      bookCount\n      born\n    }\n    genres\n    id\n  }\n`;\nexport const EDIT_AUTHOR = gql`\nmutation EditAuthor($name: String, $setBornTo: Int) {\n  editAuthor(name: $name, setBornTo: $setBornTo) {\n    name\n    bookCount\n    born\n  }\n}\n  `;\nexport const ADD_BOOK = gql`\nmutation Mutation($title: String!, $published: Int!, $author: String!, $genres: [String!]!) {\n  addBook(title: $title, published: $published, author: $author, genres: $genres) {\n    title\n    published\n    author {\n      name\n      bookCount\n      born\n    }\n    genres\n    id\n  }\n}\n\n`;\nexport const BOOK_ADDED = gql`\n  subscription {\n    bookAdded {\n      ...PersonDetails\n    }\n  }\n  \n${PERSON_DETAILS}\n`;\nexport const LOGIN = gql`\nmutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    value\n  }\n}\n\n`;\nexport const CURRENT_USER = gql`\nquery { me {\n  username\n  favoriteGenre\n  id\n}}`;\nexport const ALL_AUTHORS = gql`\n  query {\n    allAuthors {\n      name\n      bookCount\n      born\n    }\n  }\n`;\nexport const ALL_BOOKS = gql`\n  query {\n    allBooks {\n      title\n      published\n      author {\n        name\n        born\n      }\n      genres\n      id\n    }\n  }\n`;","map":{"version":3,"sources":["/home/mazeero/FullStackOpen-2020/osa8/library-frontend/src/queries.js"],"names":["gql","BOOK_DETAILS","EDIT_AUTHOR","ADD_BOOK","BOOK_ADDED","PERSON_DETAILS","LOGIN","CURRENT_USER","ALL_AUTHORS","ALL_BOOKS"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AAIA,OAAO,MAAMC,YAAY,GAAGD,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO;AAcP,OAAO,MAAME,WAAW,GAAGF,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GARO;AAUP,OAAO,MAAMG,QAAQ,GAAGH,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO;AAiBP,OAAO,MAAMI,UAAU,GAAGJ,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,EAAEK,cAAe;AACjB,CARO;AAUP,OAAO,MAAMC,KAAK,GAAGN,GAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO;AAQP,OAAO,MAAMO,YAAY,GAAGP,GAAK;AACjC;AACA;AACA;AACA;AACA,GALO;AAMP,OAAO,MAAMQ,WAAW,GAAGR,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO;AASP,OAAO,MAAMS,SAAS,GAAGT,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO","sourcesContent":["import { gql } from '@apollo/client'\n\n\n\nexport const BOOK_DETAILS = gql`\n  fragment BookDetails on Book {\n    title\n    published\n    author {\n      name\n      bookCount\n      born\n    }\n    genres\n    id\n  }\n`\n\nexport const EDIT_AUTHOR = gql`\nmutation EditAuthor($name: String, $setBornTo: Int) {\n  editAuthor(name: $name, setBornTo: $setBornTo) {\n    name\n    bookCount\n    born\n  }\n}\n  `\n\nexport const ADD_BOOK = gql`\nmutation Mutation($title: String!, $published: Int!, $author: String!, $genres: [String!]!) {\n  addBook(title: $title, published: $published, author: $author, genres: $genres) {\n    title\n    published\n    author {\n      name\n      bookCount\n      born\n    }\n    genres\n    id\n  }\n}\n\n`\n\nexport const BOOK_ADDED = gql`\n  subscription {\n    bookAdded {\n      ...PersonDetails\n    }\n  }\n  \n${PERSON_DETAILS}\n`\n\nexport const LOGIN = gql `\nmutation Login($username: String!, $password: String!) {\n  login(username: $username, password: $password) {\n    value\n  }\n}\n\n`\nexport const CURRENT_USER = gql `\nquery { me {\n  username\n  favoriteGenre\n  id\n}}`\nexport const ALL_AUTHORS = gql`\n  query {\n    allAuthors {\n      name\n      bookCount\n      born\n    }\n  }\n`\nexport const ALL_BOOKS = gql`\n  query {\n    allBooks {\n      title\n      published\n      author {\n        name\n        born\n      }\n      genres\n      id\n    }\n  }\n`"]},"metadata":{},"sourceType":"module"}